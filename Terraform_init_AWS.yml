name: Terraform_setup.yml

trigger: none

#This pipeline will be triggerred by another pipeline
#resources:
  #pipelines:
    #- pipeline: Terraform_scripts
      #source: Continous Integration (Building application and pushing to dockerhub)
      #trigger: true

stages:
- stage: Build_infrastracture
  jobs:
  - job: Build
    displayName: Start terraform script from main.tf
    pool: 
      #name: Default
      #demands: agent.os -equals Linux
      vmImage: ubuntu-latest
    variables:
    - group: "ACCESS-VARIABLES"
    steps:
    - checkout: self
    - task: AzureKeyVault@2
      displayName: Connecting to Azure Key Vault
      inputs:
        azureSubscription: 'Azure subscription 1(dfcefdc0-4ded-42a0-933b-100fbb1721ed)'
        KeyVaultName: 'key-vault-gl'
        SecretsFilter: '*'
        RunAsPreJob: true

    - task: Bash@3
      displayName: AWS Create S3 bucket
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          export AWS_ACCESS_KEY_ID=$(AWS-ACCESS-KEY-ID)
          export AWS_SECRET_ACCESS_KEY=$(AWS-SECRET-ACCESS-KEY)
          export AWS_REGION="us-east-1"
          aws s3api create-bucket --bucket gl-piotrowsianko-projectapp2 --region us-east-1
          aws s3api put-object --bucket gl-piotrowsianko-projectapp2 --key production 
          aws s3api put-object --bucket gl-piotrowsianko-projectapp2 --key staging 

    - task: Bash@3
      displayName: Terraform Init
      inputs:
        targetType: 'inline'
        script: |
                #! /bin/bash
                set -e
                export AWS_ACCESS_KEY_ID=$(AWS-ACCESS-KEY-ID)
                export AWS_SECRET_ACCESS_KEY=$(AWS-SECRET-ACCESS-KEY)
                export AWS_REGION="us-east-1"
                export TF_VAR_db_username=$(db-username)
                export TF_VAR_db_password=$(db-password)
                cd terraform
                terraform init -reconfigure -upgrade
                terraform validate
                terraform apply -auto-approve 
                az pipelines variable-group variable update --group-id 1 --name ECR_URL_PRODUCTION --value $(terraform output -raw PROD_REPO_URL)
                az pipelines variable-group variable update --group-id 1 --name db-endpoint --value $(terraform output -raw db_endpoint)   

      env:
        AZURE_DEVOPS_EXT_PAT: $(PAT)

    - task: Bash@3
      condition: failed()
      displayName: Terraform destroy
      inputs:
        targetType: 'inline'
        script: |
                #! /bin/bash
                set -e
                export AWS_ACCESS_KEY_ID=$(AWS-ACCESS-KEY-ID)
                export AWS_SECRET_ACCESS_KEY=$(AWS-SECRET-ACCESS-KEY)
                export AWS_REGION="us-east-1"
                export TF_VAR_db_username=$(db-username)
                export TF_VAR_db_password=$(db-password)
                cd terraform
                terraform destroy -auto-approve

  - job: PushApplication
    dependsOn: Build
    variables:
    - group: "ACCESS-VARIABLES"
    steps:
    - task: Bash@3
      displayName: Push application image to ECR
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          export AWS_ACCESS_KEY_ID=$(AWS-ACCESS-KEY-ID)
          export AWS_SECRET_ACCESS_KEY=$(AWS-SECRET-ACCESS-KEY)
          export AWS_REGION="us-east-1"
          docker build -t production .
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $(ECR_URL_PRODUCTION)
          docker tag production $(ECR_URL_PRODUCTION)
          docker push $(ECR_URL_PRODUCTION)

  - job: Deploy
    dependsOn: PushApplication
    variables:
    - group: "ACCESS-VARIABLES"
    steps: 
    - task: Bash@3
      displayName: Deploy application with kube.yml
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          export AWS_ACCESS_KEY_ID=$(AWS-ACCESS-KEY-ID)
          export AWS_SECRET_ACCESS_KEY=$(AWS-SECRET-ACCESS-KEY)
          export AWS_REGION="us-east-1"
          aws eks --region us-east-1 update-kubeconfig --name app
          kubectl apply -f kube.yml
